 ESSENTIAL TOOLS FOR STABLE DEVELOPMENT---------------------------------  ANDY HUNT, THE PRAGMATIC PROGRAMMERS, LLC--- DAVE THOMAS, THE PRAGMATIC PROGRAMMERS, LLC--------------------------------------- THREE BASIC PRACTICES MAKE THE DIFFERENCE BETWEEN A SOFTWARE PROJECT THAT SUCCEEDS AND ONE THAT FAILS. THESE PRACTICES SUPPORT AND REINFORCE EACH OTHER; WHEN DONE PROPERLY, THEY FORM AN INTERLOCKING SAFETY NET TO HELP ENSURE SUCCESS AND PREVENT COMMON PROJECT-DISASTERS. HOWEVER, FEW DEVELOPMENT TEAMS IN THE UNITED STATES USE THESE PROVEN TECHNIQUES, AND EVEN FEWER USE THEM CORRECTLY.-------------  MANY SOFTWARE PROJECTS THAT FAIL SEEM TO FAIL FOR VERY SIMILAR REASONS. AFTER OBSERVING-- AND HELPING-- MANY OF THESE AILING PROJECTS-OVER THE PAST COUPLE OF DECADES, IT-SEEMS CLEAR TO US THAT A MAJORITY OF COMMON PROBLEMS CAN BE-TRACED BACK TO A LACK OF THREE VERY BASIC PRACTICES. FORTUNATELY, THESE-THREE PRACTICES ARE EASY AND RELATIVELY INEXPENSIVE TO ADOPT. IT DOES NOT REQUIRE A LARGE-SCALE, EXPENSIVE, OR BUREAUCRATIC EFFORT; WITH JUST THESE PRACTICES IN PLACE, YOUR TEAM CAN WORK AT TOP SPEED WITH INCREASED PARALLELISM. YOU WILL NEVER LOSE PRECIOUS WORK, AND YOU WILL KNOW IMMEDIATELY WHEN THE DEVELOPMENT STARTS TO VEER OFF-TRACK IN TIME TO CORRECT IT, CHEAPLY AND EASILY.------- THE THREE BASIC PRACTICES THAT WE HAVE IDENTIFIED AS BEING THE MOST CRUCIAL ARE--- VERSION CONTROL, UNIT TESTING,---- AND--- AUTOMATION.---- VERSION CONTROL IS AN OBVIOUS BEST PRACTICE, YET NEARLY 40 PERCENT OF SOFTWARE PROJECTS IN THE UNITED STATES DO NOT USE ANY FORM OF VERSION CONTROL FOR THEIR SOURCE CODE FILES [1]. THE MOTTO OF THESE SHOPS SEEMS TO BE--- LAST ONE IN WINS----. THAT IS, THEY WILL USE A SHARED DRIVE OF SOME SORT AND HOPE THAT NO ONE OVERWRITES THEIR CHANGES AS THE SOFTWARE EVOLVES. HOPE IS A PRETTY POOR METHODOLOGY, AND THESE TEAMS REGULARLY LOSE PRECIOUS WORK. DEVELOPERS BEGIN TO FEAR MAKING ANY CHANGES AT ALL, IN CASE THEY ACCIDENTALLY MAKE THE SYSTEM WORSE. OF COURSE, THIS FEAR BECOMES A SELF-FULFILLING PROPHECY AS NECESSARY CHANGES ARE NEGLECTED AND THE SYSTEM BEGINS TO DEGRADE.------- UNIT TESTING IS A CODING TECHNIQUE FOR PROGRAMMERS SO THEY CAN VERIFY THAT THE CODE THEY JUST WROTE ACTUALLY DOES SOMETHING AKIN TO THEIR INTENT. IT MAY OR MAY NOT FULFILL THE REQUIREMENTS, BUT THAT IS A SEPARATE QUESTION: IF THE CODE DOES NOT DO WHAT THE PROGRAMMER THOUGHT IT DID, THEN ANY FURTHER TESTING OR VALIDATION IS BOTH MEANINGLESS AND A LARGE WASTE OF TIME AND MONEY (TWO ITEMS THAT ARE IN SHORT SUPPLY TO BEGIN WITH). DEVELOPER-CENTRIC UNIT TESTING IS A GREAT WAY TO INTRODUCE BASIC REGRESSION TESTING, CREATE MORE MODULARIZED CODE THAT IS EASIER TO MAINTAIN, AND ENSURE THAT NEW WORK DOES NOT BREAK EXISTING WORK. DESPITE THE EFFECTIVENESS OF THIS TECHNIQUE IN BOTH IMPROVING DESIGN AND IDENTIFYING AND PREVENTING DEFECTS -AKA BUGS------PERCENT OF COMPANIES IN THE UNITED STATES DO NOT EVEN TRY IT [2].------- AUTOMATION IS A CATCHALL CATEGORY THAT INCLUDES REGULAR, UNATTENDED-PROJECT BUILDS, INCLUDING REGRESSION TESTS AND PUSH-BUTTON CONVENIENCE FOR DAY-TO-DAY ACTIVITIES. REGULAR BUILDS ENSURE THAT THE PRODUCT CAN BE BUILT TO CATCH SIMPLE MISTAKES EARLY AND EASILY, WHEN-FIXING THEM IS THE CHEAPEST. WHEN IMPLEMENTED PROPERLY, IT IS AS IF YOU HAVE AN EVER-VIGILANT GUARDIAN LOOKING OVER YOUR SHOULDER, WARNING YOU AS-SOON AS THERE IS A PROBLEM. INCREDIBLY, SOME 70 PERCENT OF PROJECTS IN THE UNITED STATES DO NOT HAVE ANY SORT OF DAILY BUILD [2]. BY THE TIME THEY DISCOVER A PROBLEM, IT HAS METASTASIZED INTO A MUCH LARGER AND POTENTIALLY FATAL PROBLEM.------- WE WILL BRIEFLY EXAMINE EACH OF THESE AREAS, WITH AN IN-DEPTH LOOK AT UNIT TESTING IN PARTICULAR. WE WILL OUTLINE THE IMPORTANT IDEAS, SYNERGIES, AND CAVEATS FOR EACH OF THESE PRACTICES SO YOUR TEAM CAN EITHER BEGIN USING THEM OR IMPROVE YOUR CURRENT USE OF THEM.-------------------------------- VERSION CONTROL------------- EVERYONE CAN AGREE THAT VERSION CONTROL IS A BEST PRACTICE BUT EVEN WITH IT IN PLACE, IS IT BEING USED EFFECTIVELY? ASK YOURSELF THESE QUESTIONS: CAN YOU RE-CREATE YOUR SOFTWARE EXACTLY AS IT EXISTED ON JANUARY 8? WHEN A BUG IS FOUND THAT AFFECTS MULTIPLE VERSIONS OF YOUR RELEASED SOFTWARE, CAN YOUR TEAM FIX IT JUST ONCE, AND THEN APPLY THAT FIX TO THE DIFFERENT VERSIONS AUTOMATICALLY? CAN A DEVELOPER QUICKLY BACK OUT OF A BAD PIECE OF CODE?------- THERE IS MORE TO VERSION CONTROL THAN JUST KEEPING TRACK OF FILES. BUT BEFORE WE PROCEED, WE NEED TO DEFINE-SOME SIMPLE TERMINOLOGY: WE USE--- CHECK-IN---- TO MEAN THAT A PROGRAMMER HAS SUBMITTED HIS OR HER CHANGES TO THE VERSION CONTROL SYSTEM. WE USE--- CHECKOUT---- TO REFER TO GETTING A PERSONAL VERSION OF CODE FROM THE VERSION CONTROL SYSTEM INTO A LOCAL WORKING AREA.------- WHEN A PROGRAMMER CHECKS IN CODE, IT IS NOW POTENTIALLY AVAILABLE TO THE REST OF THE TEAM. AS SUCH, IT IS ONLY POLITE TO ENSURE THAT THIS NEW CODE ACTUALLY COMPILES SUCCESSFULLY; IT SHOULD BE ACCOMPANIED BY UNIT TESTS (MORE ON THIS LATER), AND THOSE TESTS SHOULD PASS. ALL THE OTHER PASSING TESTS IN THE SYSTEM SHOULD CONTINUE TO PASS AS WELL-- IF THEY SUDDENLY FAIL, THEN YOU CAN EASILY TRACE THE FAILURE TO THE NEW CODE THAT WAS INTRODUCED.------- IT IS FAR EASIER TO TRACK DOWN THESE SORT OF PROBLEMS RIGHT AT THE POINT OF CREATION INSTEAD OF DAYS, WEEKS, OR EVEN MONTHS LATER. TO EXPLOIT THIS EFFECT, YOU MUST ALLOW AND ENCOURAGE FREQUENT CHECK-INS OF CODE MULTIPLE TIMES PER DAY. IT IS NOT UNUSUAL TO SEE TEAM MEMBERS CHECK-IN CODE 10-20 TIMES A DAY. IT--- IS---- UNUSUAL-- AND VERY DANGEROUS-- TO ALLOW A PROGRAMMER TO GO A FEW DAYS OR A WEEK OR MORE WITHOUT CHECKING IN CODE.------- BECAUSE CHECK-INS OCCUR SO FREQUENTLY, THESE AND OTHER DAY-TO-DAY OPERATIONS MUST BE VERY FAST AND LOW CEREMONY. A CHECK-IN OR CHECKOUT OF CODE SHOULD NOT TAKE MORE THAN FIVE TO 15 SECONDS IN GENERAL. IF IT TAKES AN HOUR, PEOPLE WILL NOT DO IT, AND YOU HAVE LOST THE ADVANTAGE.------- NOW SOME PEOPLE GET A LITTLE NERVOUS WHEN THEY READ THIS PART. THEY FRET THAT ALL OF THIS CODE IS BEING DUMPED INTO THE SYSTEM WITHOUT BEING REVIEWED, TESTED BY QA, AUDITED, OR WHATEVER ELSE THEIR METHODOLOGY OR ENVIRONMENT DEMANDS. THEY ARE RIGHTFULLY CONCERNED THAT THIS CODE IS NOT YET READY TO BE PART OF A RELEASE. NONETHELESS, IT MUST STILL BE IN THE VERSION CONTROL SYSTEM SO THAT IT IS PROTECTED.--------MOST VERSION CONTROL-SYSTEMS PROVIDE A MECHANISM TO DIFFERENTIATE ONGOING DEVELOPMENT CHANGES FROM OFFICIAL RELEASE CANDIDATES. SOME FEATURE EXPLICIT--- PROMOTION---- COMMANDS TO ALLOW THIS. YOU CAN ACCOMPLISH THE SAME THING-IN OTHER SYSTEMS BY USING TAGS (OR VERSION LABELS) TO IDENTIFY STABLE RELEASE VERSIONS-OF SOURCE CODE AS OPPOSED TO CODE THAT IS IN PROGRESS.------- REGARDLESS OF THE MECHANISM, IT MUST BE AN EASY OPERATION TO PROMOTE DEVELOPMENT CHANGES TO AN OFFICIAL RELEASE STATUS. ON THE OTHER SIDE OF THE COIN, YOU NEED TO BE ABLE TO BACK OUT CHANGES AND ANY DISASTROUS NEW CODE WHEN NEEDED.------- FINALLY, YOU NEED TO BE ABLE TO RE-CREATE ANY PRODUCT BUILT AT ANY PREVIOUS POINT IN TIME. THIS ABILITY TO-GO BACK IN TIME IS CRUCIAL FOR EFFECTIVE DEBUGGING AND PROBLEM SOLVING (JUST THINK OF ANY DEVELOPER WHO STARTS A DISCUSSION WITH, "WELL, IT USED TO WORK").------- COMMERCIAL AND FREELY AVAILABLE VERSION CONTROL SYSTEMS VARY IN COMPLEXITY, FEATURES, AND EASE OF ADMINISTRATION. BUT ONE FEATURE IN PARTICULAR IS WORTH EXAMINING: WHETHER IT SUPPORTS STRICT LOCKING OR OPTIMISTIC LOCKING. IN SYSTEMS UNDER STRICT LOCKING, ONLY ONE PERSON CAN EDIT A FILE AT A TIME. WHILE THAT SOUNDS LIKE A GOOD IDEA, IT TURNS OUT TO BE UNDULY RESTRICTIVE IN PRACTICE. WE FAVOR THE CONCURRENT VERSION SYSTEM---------------------------------------------------------------------- WWW.CVSHOME.ORG---- DESCRIBED IN [3].------- YOU MAY FIND YOU CAN INCREASE PARALLELISM AND EFFICIENCY IN YOUR TEAM BY USING A SYSTEM THAT FEATURES OPTIMISTIC LOCKING. IN THESE SYSTEMS, MULTIPLE PEOPLE CAN EDIT THE SAME SOURCE CODE FILE SIMULTANEOUSLY. THE SYSTEM USES CONFLICT-RESOLUTION ALGORITHMS TO MERGE THE DISPARATE CHANGES TOGETHER IN A SENSIBLE MANNER. NINETY-NINE PERCENT OF THE TIME IT WORKS PERFECTLY WITHOUT INTERVENTION. OCCASIONALLY, HOWEVER, THERE IS A CONFLICT THAT MUST BE ADDRESSED MANUALLY. AT NO POINT IS ANYONE'S WORK IN DANGER OF BEING LOST, AND IT ENDS UP BEING MUCH MORE EFFICIENT TO COORDINATE JUST THESE FEW CONFLICTS BY HAND INSTEAD OF HAVING EVERYONE COORDINATE EVERY CHANGE WITH THE REST OF THE TEAM.-------------------------------- UNIT TESTING------------- WHEN A DEVELOPER MAKES A CHANGE TO THE CODE ON YOUR PROJECT, WHAT FEEDBACK IS AVAILABLE? DOES THE-DEVELOPER HAVE ANY WAY OF KNOWING IF THE NEW CODE BROKE ANYTHING ELSE? BETTER STILL, HOW DO--- YOU---- KNOW IF ANY DEVELOPER HAS BROKEN ANYTHING TODAY? A SYSTEM OF AUTOMATED UNIT TESTS WILL GIVE YOU THIS INFORMATION IN REAL-TIME.------- PROGRAMMING LANGUAGES ARE NOTORIOUS FOR DOING EXACTLY-WHAT PROGRAMMERS SAY, NOT WHAT THEY MEAN. LIKE A PETULANT CHILD THAT TAKES YOUR EXPRESSIONS COMPLETELY LITERALLY, THE COMPUTER FOLLOWS OUR INSTRUCTIONS TO THE LETTER, WITH NO REGARD AT ALL TO OUR INTENT. TECHNOLOGY HAS YET TO PRODUCE THE COMPILER THAT IMPLEMENTS WITH--- DO WHAT I MEAN, NOT WHAT I SAY.----------- SO IN KEEPING WITH THE IDEA OF FINDING AND FIXING PROBLEMS AS SOON AS THEY OCCUR, YOU WANT PROGRAMMERS TO USE UNIT TESTS (OR CHECKED EXAMPLES) TO VERIFY THE COMPUTER'S LITERAL INTERPRETATION OF THEIR COMMANDS. IT IS REALLY NO DIFFERENT FROM FOLLOWING THROUGH WITH A SUBORDINATE TO VERIFY THAT A DELEGATED TASK WAS PERFORMED-- EXCEPT THAT INSTEAD OF JUST CHECKING ONCE, AUTOMATED UNIT TESTS WILL CHECK AND RECHECK EVERY TIME ANY CODE IS CHANGED.------- THERE ARE SOME REQUIREMENTS TO USING THIS STYLE OF DEVELOPMENT, HOWEVER:--------- THE CODE BASE MUST BE DECOUPLED ENOUGH TO ALLOW TESTING. WHEN CODE IS TIGHTLY COUPLED, IT IS VERY DIFFICULT TO TEST INDIVIDUAL PIECES IN ISOLATION, AND HARDER TO DEVISE UNIT TESTS THAT EXERCISE SPECIFIC AREAS OF FUNCTIONALITY. WELLWRITTEN CODE, ON THE OTHER HAND, IS EASY TO TEST. IF YOUR TEAM FINDS THAT THE CODE IS DIFFICULT TO TEST, THEN TAKE-THAT AS-A WARNING SIGN THAT THE CODE IS IN SERIOUS TROUBLE TO BEGIN WITH.--------- ONLY CHECK-IN TESTED CODE. AS WE MENTIONED ABOVE, CHECKING-IN FOISTS A PROGRAMMER'S CODE ONTO THE REST OF THE TEAM. ONCE IT IS AVAILABLE TO EVERYONE, THEN THE WHOLE TEAM WILL BEGIN TO RELY ON IT. BECAUSE OF THIS RELIANCE, ALL CODE THAT IS CHECKED IN MUST PASS ITS OWN TESTS.--------- IN ADDITION TO PASSING ITS OWN TESTS, THE PROGRAMMER CHECKING IN THE CODE MUST ENSURE NOTHING ELSE BREAKS, EITHER. THIS SIMPLE REGRESSION HELPS PREVENT THAT FRUSTRATING FEELING OF--- ONE STEP FORWARD, TWO STEPS BACK---- THAT BECOMES COMMONPLACE WHEN CODE FIXES CAUSE COLLATERAL DAMAGE TO OTHER PARTS OF THE CODE BASE. USUALLY THESE BUGS THEN REQUIRE FIXES, WHICH IN TURN CAUSE MORE DAMAGE, AND SO ON. THE DISCIPLINE OF KEEPING ALL THE TESTS RUNNING ALL THE TIME PREVENTS THAT PARTICULAR DEATH-SPIRAL.--------- THERE SHOULD BE AT LEAST AS MUCH TEST CODE AS PRODUCTION CODE. YOU MIGHT THINK THAT IS EXCESSIVE, BUT IT IS REALLY JUST A QUESTION OF WHERE THE VALUE OF THE SYSTEM RESIDES. WE FIRMLY BELIEVE THE CODE THAT IMPLEMENTS THE SYSTEM IS NOT WHERE THE VALUE OF YOUR INTELLECTUAL PROPERTY LIES. CODE CAN BE REWRITTEN AND REPLACED, AND THE NEW CODE (EVEN AN ENTIRELY NEW SYSTEM) CAN BE VERIFIED AGAINST THE EXISTING TESTS. NOW THE MOST PRECISE SPECIFICATION OF THE SYSTEM IS IN EXECUTABLE FORM-- THE UNIT TESTS. THE LEARNING AND EXPERIENCE THAT GOES INTO CREATING THE UNIT TESTS IS INVALUABLE, AND THE TESTS THEMSELVES ARE THE BEST EXPRESSION WE HAVE OF THAT KNOWLEDGE.------------------- WE WILL LOOK AT IMPLEMENTING UNIT TESTS (AKA CHECKED EXAMPLES) IN MUCH GREATER DETAIL LATER IN THIS ARTICLE.-------------------------------- AUTOMATION------------- AN-OLD SAYING GOES THE ---COBBLER'S CHILDREN HAVE NO SHOES----. THIS SAYING IS PARTICULARLY APPROPRIATE FOR OUR USE OF SOFTWARE TOOLS DURING SOFTWARE DEVELOPMENT. WE SEE TEAMS ROUTINELY WASTE TIME USING MANUAL PROCEDURES THAT COULD EASILY BE AUTOMATED.------- EVERYONE CLAMORS FOR SOFTWARE DEVELOPMENT TO BE MORE DEFINED AND REPEATABLE. WELL, THE--- DESIGN---- AND IMPLEMENTATION OF SOFTWARE PROBABLY CANNOT BE MADE REPEATABLE ANY MORE THAN YOU COULD MAKE THE PROCESS OF MAKING HIT MOVIES REPEATABLE. BUT THE--- PRODUCTION---- OF SOFTWARE IS ANOTHER MATTER ENTIRELY.------- THE PROCESS OF TAKING SOURCE CODE FILES, BITS OF EXTENSIBLE MARKUP LANGUAGE, LIBRARIES, AND OTHER RESOURCES AND PRODUCING AN EXECUTABLE FOR THE END USER SHOULD BE PRECISELY REPEATABLE. GIVEN THE SAME INPUTS, YOU WANT THE SAME OUTPUTS, EVERY TIME, WITHOUT EXCUSES. IN COMBINATION WITH VERSION CONTROL, YOU WANT TO BE ABLE TO GO BACK IN TIME AND REPRODUCE THAT SAME PILE OF BITS THAT YOU WOULD HAVE PRODUCED ON JANUARY 8 JUST AS EASILY. THAT COMES IN VERY HANDY SHOULD THE DEPARTMENT OF JUSTICE ASK-FOR IT POLITELY, OR A FRUSTRATED CUSTOMER ASKS FOR IT SOMEWHAT LESS POLITELY TO WORK AROUND SOME OUTSTANDING BUG.------- THE RULE WE TRY TO ADOPT IS THAT ANY MANUAL PROCESS THAT IS REPEATED TWICE IS LIKELY TO BE REPEATED A THIRD TIME-- OR MORE-- SO IT NEEDS TO BE ENCAPSULATED WITHIN A SHELL SCRIPT, BATCH FILE, PIECE OF JAVA CODE, JOB CONTROL LANGUAGE, OR WHATEVER.------- UNIT TESTS, AS WELL AS FUNCTIONAL AND ACCEPTANCE TESTS, SHOULD BE RUN AUTOMATICALLY AS WELL AS BE PART OF THE BUILD PROCESS. YOU WILL PROBABLY WANT TO RUN THE UNIT TESTS (WHICH SHOULD EXECUTE VERY QUICKLY) WITH EVERY BUILD; AUTOMATIC FUNCTIONAL AND ACCEPTANCE TESTS MIGHT TAKE LONGER AND YOU MAY ONLY WANT TO RUN THOSE ONCE A WEEK, OR WHEN CONVENIENT.------- YOU SEE, NOT ONLY DOES AUTOMATION MAKE DEVELOPER'S LIVES EASIER BY PROVIDING PUSH-BUTTON CONVENIENCE, IT HELPS KEEP THE FEEDBACK COMING BY CONSTANTLY CHECKING THE STATE OF THE SOFTWARE. AUTOMATED BUILDS ARE CONSTANTLY ASKING TWO QUESTIONS: DOES THE SOFTWARE BUILD CORRECTLY? DO ALL THE TESTS STILL PASS A BASIC REGRESSION? WITH THE COMPUTER PERFORMING THESE CHECKS REGULARLY, DEVELOPERS DO NOT HAVE TO. PROBLEMS CAN BE IDENTIFIED AS SOON AS THEY HAPPEN, AND THE APPROPRIATE DEVELOPER OR TEAM LEAD CAN BE NOTIFIED IMMEDIATELY OF THE PROBLEM [4]. PROBLEMS CAN BE FIXED QUICKLY, BEFORE THEY HAVE A CHANCE TO CAUSE ANY ADDITIONAL DAMAGE. THAT IS THE BENEFIT WE WANT FROM AUTOMATION.------- FINALLY, CONSIDER HOW THE BUILD COMMUNICATES TO THE DEVELOPMENT TEAM AND ITS MANAGEMENT. DOES THE TEAM LEAD LOOK AT THE LATEST RESULTS IN SOME LOG FILE AND THEN REPORT STATUS TO MANAGEMENT? DOES NOT THAT CONSTITUTE A MANUAL PROCESS? IT IS RELATIVELY EASY TO SET UP VISUAL DISPLAY DEVICES, RANGING FROM LIQUID CRYSTAL DISPLAY SCREENS TO BUBBLING LAVA-STYLE LAMPS TO THE NEW AND POPULAR AMBIENT ORB [4].-------------------------------- SYNERGY------------- THESE-THREE PRACTICES INTERLOCK TO PROVIDE A GENUINE SAFETY NET FOR DEVELOPERS. VERSION CONTROL IS THE FOUNDATION. UNIT TESTS AND SCRIPTS FOR AUTOMATION ARE UNDER VERSION CONTROL, BUT VERSION CONTROL NEEDS AUTOMATION TO BE EFFECTIVE. UNIT TESTING NEEDS BOTH VERSION CONTROL AND AUTOMATION.------- WITH THE COMBINATION, DEVELOPERS CAN BETTER AFFORD TO TAKE CHANCES, EXPERIMENT, AND FIND THE BEST SOLUTIONS. THE RULE OF THREE SAYS THAT IF YOU HAVE NOT PROPOSED AT LEAST THREE SOLUTIONS TO A PROBLEM THEN YOU HAVE NOT THOUGHT ABOUT IT HARD ENOUGH. WITH THIS SET OF PRACTICES IN PLACE, DEVELOPERS CAN REALISTICALLY TRY OUT A NUMBER OF DIFFERENT SOLUTIONS TO A PROBLEM: VERSION CONTROL WILL KEEP THEM SEPARATE, AND UNIT TESTING WILL HELP CONFIRM THE VIABILITY OF EACH SOLUTION. ALL THIS WITH PLENTY OF AUTOMATED SUPPORT, INCLUDING CONTINUOUS, ONGOING CHECKS ENSURES THAT THE TEAM DOES NOT WANDER TOO FAR OFF INTO THE WOODS. THIS IS HOW MODERN, SUCCESSFUL SOFTWARE DEVELOPMENT IS DONE.-------------------------------- UNIT TESTING WITH YOUR RIGHT-BICEP------------- YOU CAN STRENGTHEN YOUR ORGANIZATION'S TESTING SKILLS BY LOOKING AT SIX SPECIFIC AREAS OF CODE THAT MAY NEED UNIT TESTS. THESE AREAS ARE REMEMBERED EASILY USING THE MNEMONIC RIGHT-BICEP [5]:--------------- RIGHT----------- ARE THE RESULTS--- RIGHT?---------------- B----------- ARE ALL THE--- BOUNDARY---- CONDITIONS CORRECT?------------ I----------- CAN YOU CHECK--- INVERSE---- RELATIONSHIPS?------------ C----------- CAN YOU--- CROSS-CHECK---- RESULTS USING OTHER MEANS?------------ E----------- CAN YOU FORCE--- ERROR---- CONDITIONS TO HAPPEN?------------ P----------- ARE--- PERFORMANCE---- CHARACTERISTICS WITHIN BOUNDS?----------------------------------- ARE THE RESULTS RIGHT?------------- THE FIRST AND MOST-OBVIOUS AREA TO TEST-IS SIMPLY TO SEE IF THE EXPECTED RESULTS ARE RIGHT-- TO VALIDATE THE RESULTS. THESE ARE USUALLY THE EASY TESTS, AS THEY REPRESENT THE ANSWER TO THE KEY QUESTION: IF THE CODE RAN CORRECTLY, HOW WOULD-I KNOW? HERE IS AN EXAMPLE OF HOW BEING FORCED TO THINK ABOUT TESTING HELPS DEVELOPERS CODE BETTER: IF THIS QUESTION CANNOT BE ANSWERED SATISFACTORILY, THEN WRITING THE CODE-- OR THE TEST-- MAY BE A COMPLETE WASTE OF TIME.------- "BUT WAIT," YOU CRY OUT, "THAT DOES NOT SOUND VERY AGILE! WHAT IF THE REQUIREMENTS ARE VAGUE OR INCOMPLETE? DOES THAT MEAN WE CAN'T WRITE CODE UNTIL ALL THE REQUIREMENTS ARE FIRM?" NO, IT DOES NOT AT ALL. IF THE REQUIREMENTS ARE TRULY NOT YET KNOWN, OR NOT YET COMPLETE, YOU CAN ALWAYS MAKE SOME ASSUMPTIONS AS A STAKE IN THE GROUND. THEY MAY NOT BE CORRECT FROM THE USER'S POINT OF VIEW (OR ANYONE ELSE ON THE PLANET), BUT THEY LET THE TEAM CONTINUE TO DEVELOP. AND, BECAUSE YOU HAVE WRITTEN A TEST BASED ON YOUR ASSUMPTION, YOU HAVE NOW DOCUMENTED IT-- NOTHING IS IMPLICIT.------- OF COURSE, YOU MUST THEN ARRANGE FOR FEEDBACK WITH USERS OR SPONSORS TO FINETUNE YOUR ASSUMPTIONS. THE DEFINITION OF--- CORRECT---- MAY CHANGE OVER THE LIFETIME OF THE CODE IN QUESTION, BUT AT ANY POINT, YOU SHOULD BE ABLE TO PROVE THAT-IT IS DOING WHAT YOU-THINK IT OUGHT.----------------------------------- BOUNDARY CONDITIONS------------- IDENTIFYING BOUNDARY CONDITIONS IS ONE OF THE MOST VALUABLE PARTS OF UNIT TESTING BECAUSE THIS IS WHERE MOST BUGS GENERALLY LIVE-- AT THE EDGES. SOME CONDITIONS YOU MIGHT WANT TO THINK ABOUT INCLUDE THE FOLLOWING:--------- TOTALLY BOGUS OR INCONSISTENT INPUT VALUES SUCH AS A FILE---- NAME OF !*W:X\\{\GI/W$$G/H\#WQ@.--------- BADLY FORMATTED DATA SUCH AS AN E-MAIL ADDRESS WITHOUT A TOP-LEVEL DOMAIN FRED@FOOBAR.--------- EMPTY OR MISSING VALUES SUCH AS 0, 0.0, "", OR NULL.--------- VALUES FAR IN EXCESS OF REASONABLE EXPECTATIONS SUCH AS A PERSON'S AGE OF 10,000 YEARS.--------- DUPLICATES IN LISTS THAT SHOULD NOT HAVE DUPLICATES.--------- ORDERED LISTS THAT ARE NOT IN ORDER AND VICE-VERSA. TRY HANDING A PRE-SORTED LIST TO A SORT ALGORITHM, FOR INSTANCE, OR EVEN A REVERSE-SORTED LIST.--------- THINGS THAT ARRIVE OUT OF ORDER, OR HAPPEN OUT OF-EXPECTED ORDER SUCH AS TRYING TO PRINT A DOCUMENT BEFORE LOGGING IN, FOR INSTANCE.------------------- AN EASY WAY TO THINK OF POSSIBLE BOUNDARY CONDITIONS IS TO REMEMBER-THE ACRONYM CORRECT.-FOR EACH OF THESE ITEMS, CONSIDER WHETHER OR NOT SIMILAR CONDITIONS MAY EXIST IN YOUR METHOD THAT YOU WANT TO TEST, AND WHAT MIGHT HAPPEN IF THESE CONDITIONS WERE VIOLATED [4]:----------------- CONFORMANCE.--------- DOES THE VALUE CONFORM TO AN EXPECTED FORMAT?----------------- ORDERING.--------- IS THE SET OF VALUES ORDERED OR UNORDERED AS APPROPRIATE?----------------- RANGE.--------- IS THE VALUE WITHIN REASONABLE MINIMUM AND MAXIMUM VALUES?----------------- REFERENCE.--------- DOES THE CODE REFERENCE ANYTHING EXTERNAL THAT IS NOT UNDER DIRECT CONTROL OF THE CODE ITSELF ?----------------- EXISTENCE.--------- DOES THE VALUE EXIST (E.G., IS NON-NULL, NON-ZERO, PRESENT IN A SET, ETC.)?----------------- CARDINALITY.--------- ARE THERE EXACTLY ENOUGH VALUES?----------------- TIME (ABSOLUTE AND RELATIVE).--------- IS EVERYTHING HAPPENING IN ORDER? AT THE RIGHT TIME? IN TIME?----------------------------------------------- CHECK INVERSE RELATIONSHIPS------------- SOME METHODS CAN BE CHECKED BY APPLYING THEIR LOGICAL INVERSE. FOR INSTANCE DEVELOPERS MIGHT CHECK A METHOD THAT CALCULATES A SQUARE ROOT BY SQUARING-THE RESULT, AND TESTING THAT IT-IS TOLERABLY CLOSE TO THE ORIGINAL NUMBER. THEY MIGHT ALSO CHECK THAT SOME DATA WAS SUCCESSFULLY INSERTED INTO A DATABASE BY THEN SEARCHING FOR IT, AND SO ON.------- BE CAUTIOUS WHEN THE SAME PERSON HAS WRITTEN BOTH THE ORIGINAL ROUTINE AND ITS INVERSE, AS SOME BUGS MIGHT BE MASKED BY A COMMON ERROR IN BOTH ROUTINES. WHERE POSSIBLE, USE A DIFFERENT SOURCE FOR THE INVERSE TEST. IN THE SQUARE ROOT EXAMPLE, WE MIGHT USE REGULAR MULTIPLICATION TO TEST OUR METHOD. FOR THE DATABASE SEARCH, WE WILL PROBABLY USE A VENDOR-PROVIDED SEARCH ROUTINE TO TEST OUR INSERTION.----------------------------------- CROSS-CHECK USING OTHER MEANS------------- DEVELOPERS MIGHT ALSO BE ABLE TO CROSSCHECK RESULTS OF THEIR METHOD USING DIFFERENT MEANS. USUALLY THERE IS MORE THAN ONE WAY TO CALCULATE SOME QUANTITY; WE MIGHT PICK ONE ALGORITHM OVER THE OTHERS BECAUSE IT PERFORMS BETTER OR HAS OTHER DESIRABLE CHARACTERISTICS. THAT IS THE ONE WE WILL USE IN PRODUCTION, BUT WE CAN USE ONE OF THE OTHER VERSIONS TO CROSS-CHECK OUR RESULTS IN THE TEST SYSTEM. THIS TECHNIQUE IS ESPECIALLY HELPFUL WHEN THERE IS A PROVEN, KNOWN WAY OF ACCOMPLISHING THE TASK THAT HAPPENS TO BE TOO SLOW OR TOO INFLEXIBLE TO USE IN PRODUCTION CODE.------- ANOTHER WAY OF LOOKING AT THIS IS TO USE DIFFERENT PIECES OF DATA FROM THE CODE ITSELF TO MAKE SURE THEY ALL--- ADD UP----. FOR INSTANCE, SUPPOSE YOU HAD SOME SORT OF SYSTEM THAT AUTOMATED A LENDING LIBRARY. IN THIS SYSTEM, THE NUMBER OF COPIES OF A PARTICULAR BOOK SHOULD ALWAYS BALANCE. THAT IS, THE NUMBER OF COPIES THAT ARE CHECKED OUT PLUS THE NUMBER OF COPIES SITTING ON THE SHELVES SHOULD ALWAYS EQUAL THE TOTAL NUMBER OF COPIES IN THE COLLECTION. THESE ARE SEPARATE PIECES OF DATA, AND MAY EVEN BE MANAGED BY DIFFERENT PIECES OF CODE, BUT THEY STILL HAVE TO AGREE AND SO CAN BE USED TO CROSS-CHECK ONE ANOTHER.----------------------------------- FORCE ERROR CONDITIONS------------- IN THE REAL WORLD, ERRORS HAPPEN. DISKS FILL UP, NETWORK LINES DROP, E-MAIL GOES INTO A BLACK HOLE, AND PROGRAMS CRASH. YOU SHOULD BE ABLE TO TEST THAT CODE HANDLES ALL OF THESE REAL-WORLD PROBLEMS BY FORCING ERRORS TO OCCUR.------- THAT IS EASY ENOUGH TO DO WITH INVALID PARAMETERS AND THE LIKE, BUT TO SIMULATE SPECIFIC NETWORK ERRORS-- WITHOUT UNPLUGGING ANY CABLES-- TAKES SOME SPECIAL TECHNIQUES, INCLUDING USING MOCK OBJECTS.------- IN MOVIE AND TELEVISION PRODUCTION, CREWS WILL OFTEN USE--- STAND-INS----, OR DOUBLES, FOR THE REAL ACTORS. IN PARTICULAR--WHILE THE CREWS ARE SETTING UP THE-LIGHTS AND CAMERA ANGLES, THEY WILL USE--- LIGHTING DOUBLES----: INEXPENSIVE, UNIMPORTANT PEOPLE WHO ARE ABOUT THE SAME HEIGHT AND COMPLEXION AS THE VERY EXPENSIVE, IMPORTANT ACTORS WHO REMAIN SAFELY LOUNGING IN THEIR LUXURIOUS TRAILERS.------- THE CREW THEN TESTS THEIR SETUP WITH THE LIGHTING DOUBLES, MEASURING THE DISTANCE FROM THE CAMERA TO THE STAND-IN'S NOSE, ADJUSTING THE LIGHTING UNTIL THERE ARE NO UNWANTED SHADOWS, AND SO ON, WHILE THE OBEDIENT STAND-IN JUST STANDS THERE AND DOES NOT WHINE OR COMPLAIN ABOUT--- LACKING MOTIVATION---- FOR THEIR CHARACTER IN THIS SCENE.------- WHAT YOU CAN DO IN UNIT TESTING IS SIMILAR TO THE USE OF LIGHTING DOUBLES IN THE MOVIES: USE A CHEAP STAND-IN THAT IS KIND OF CLOSE TO THE REAL THING, AT LEAST SUPERFICIALLY, BUT THAT WILL BE EASIER TO WORK WITH FOR-YOUR PURPOSES.----------------------------------- PERFORMANCE CHARACTERISTICS------------- ONE AREA THAT MIGHT PROVE BENEFICIAL TO EXAMINE IS PERFORMANCE CHARACTERISTICS-- NOT PERFORMANCE ITSELF, BUT TRENDS AS INPUT SIZES GROW, AS PROBLEMS BECOME MORE COMPLEX, AND SO ON. WHY? WE HAVE ALL EXPERIENCED APPLICATIONS THAT WORK FINE FOR A YEAR OR SO, BUT SUDDENLY AND INEXPLICABLY SLOW TO A CRAWL. OFTEN, THIS IS THE RESULT OF A SILLY ERROR OR OVERSIGHT: A DATABASE ADMINISTRATOR CHANGED THE INDEXING STRUCTURE IN THE DATABASE, OR A DEVELOPER TYPED AN EXTRA ZERO INTO A LOOP COUNTER.------- WHAT WE WOULD LIKE TO ACHIEVE IS A QUICK REGRESSION TEST OF PERFORMANCE CHARACTERISTICS. WE WANT TO DO THIS REGULARLY, EVERY DAY AT LEAST, SO THAT IF WE HAVE INADVERTENTLY INTRODUCED A PERFORMANCE PROBLEM WE WILL KNOW ABOUT IT SOONER RATHER THAN LATER (BECAUSE THE NEARER IN-TIME YOU ARE TO THE CHANGE-THAT INTRODUCED THE PROBLEM, THE EASIER IT IS TO WORK THROUGH-THE LIST OF THINGS THAT MAY HAVE CAUSED THAT PROBLEM).------- SO, TO AVOID SHIPPING SOFTWARE WITH UNSUSPECTED PERFORMANCE PROBLEMS, TEAMS SHOULD CONSIDER WRITING SOME ROUGH TESTS JUST TO MAKE SURE THAT THE PERFORMANCE CURVE REMAINS STABLE. FOR INSTANCE, SUPPOSE THE TEAM IS WORKING ON-A COMPONENT THAT LETS USERS-BROWSE THE WEB FROM WITHIN THEIR APPLICATION. PART OF THE REQUIREMENT IS TO FILTER OUT ACCESS TO WEB SITES THAT WE WISH TO BLOCK. THE CODE WORKS FINE WITH A FEW DOZEN SAMPLE SITES, BUT WILL IT WORK AS WELL WITH 10,000? 100,000? WE CAN WRITE A UNIT TEST TO FIND OUT.------- THIS GIVES US SOME ASSURANCE THAT WE ARE STILL MEETING PERFORMANCE TARGETS. BUT BECAUSE THIS ONE TEST TAKES SIX TO SEVEN SECONDS TO RUN, WE MAY NOT WANT TO RUN IT EVERY TIME. AS LONG AS WE RUN IT (SAY) NIGHTLY, WE WILL QUICKLY BE ALERTED TO ANY PROBLEMS WE MAY INTRODUCE WHILE-THERE IS STILL TIME TO FIX THEM.-------------------------------- GETTING STARTED------------- ALL OF THE SOFTWARE TOOLS MENTIONED IN THIS ARTICLE ARE FREELY AVAILABLE ON THE WEB. TO GET STARTED USING THESE PRACTICES EFFECTIVELY, WE RECOMMEND FOLLOWING THIS SEQUENCE:--------- GET EVERYTHING INTO VERSION CONTROL.--------- ARRANGE FOR AUTOMATIC, DAILY BUILDS. INCREASE THESE TO MULTIPLE TIMES PER DAY OR CONTINUOUSLY AS SOON AS THE PROCESS BEGINS TO WORK SMOOTHLY.--------- START WRITING UNIT TESTS FOR NEW CODE. WHERE NEEDED, ADD SOME UNIT TESTS TO EXISTING CODE (BUT BE PRAGMATIC ABOUT IT; ONLY ADD TESTS IF THEY WILL REALLY HELP, NOT JUST FOR THE SAKE OF COMPLETENESS).--------- ADD THE UNIT TESTS TO THE SCHEDULED BUILDS.------------------- YOU CAN BEGIN RIGHT AWAY. FIRE UP THAT WEB BROWSER AND START DOWNLOADING SOME SOFTWARE IF YOU DO NOT ALREADY HAVE IT. THESE IDEAS WILL NOT FIX ALL THE PROBLEMS ON YOUR PROJECT, OF COURSE, BUT THEY WILL PROVIDE YOUR PROJECT WITH A FIRM FOOTING SO YOU CAN CONCENTRATE ON THE TRULY DIFFICULT PROBLEMS.-------------------------------- REFERENCES----------------------- ZEICHICK, ALAN. "DEBUGGERS, SOURCE CONTROL KEYS TO QUALITY.---" SOFTWARE DEVELOPMENT TIMES---- 1 MAR.--------------- CUSUMANO, MICHAEL, ET AL. "A GLOBAL SURVEY OF SOFTWARE DEVELOPMENT PRACTICES." PAPER----- MIT SLOAN SCHOOL OF MANAGEMENT, JUNE--------------- THOMAS, DAVE, AND ANDY HUNT.--- PRAGMATIC VERSION CONTROL WITH CVS----. RALEIGH, NC: PRAGMATIC BOOKSHELF,--------------------------------------------------------------------------------- 2003 WWW.PRAGMATICBOOKSHELF.COM----.--------- CLARK, MIKE.--- PRAGMATIC PROJECT AUTOMATION.---- RALEIGH, NC: PRAGMATIC BOOKSHELF,--------------------------------------------------------------------------------- 2004 WWW.PRAGMATICBOOKSHELF.COM----.--------- HUNT, ANDY, AND DAVE THOMAS.--- PRAGMATIC UNIT TESTING IN JAVA WITH JUNIT.---- RALEIGH, NC: PRAGMATIC BOOKSHELF,------ (ALSO AVAILABLE IN A C# VERSION)--------------------------------------------------------------------------------- WWW.PRAGMATICBOOKSHELF.COM----.------------------------------------------------  ABOUT THE AUTHORS----------------------------------------------------------------------------------------------------------- ANDY HUNT---- IS AN AVID WOODWORKER AND MUSICIAN, BUT CURIOUSLY, HE IS MORE IN DEMAND AS A CONSULTANT. HE HAS WORKED IN TELECOMMUNICATIONS, BANKING, FINANCIAL SERVICES, AND UTILITIES, AS WELL AS MORE EXOTIC FIELDS SUCH AS MEDICAL IMAGING AND GRAPHIC ARTS. HUNT IS AUTHOR OF MANY ARTICLES, COLUMNS AND BOOKS, AND CO-AUTHOR OF "THE PRAGMATIC PROGRAMMER." THE PRAGMATIC PROGRAMMERS,LLC--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  DAVE THOMAS---- LIKES TO FLY SINGLE-ENGINE AIRPLANES AND PAYS FOR HIS HABIT BY FINDING ELEGANT SOLUTIONS TO DIFFICULT PROBLEMS, CONSULTING IN AREAS AS DIVERSE AS AEROSPACE, BANKING, FINANCIAL SERVICES, TELECOMMUNICATIONS, TRAVEL AND TRANSPORT, AND THE INTERNET. THOMAS IS AUTHOR OF MANY ARTICLES, COLUMNS AND BOOKS, AND CO-AUTHOR OF "THE PRAGMATIC PROGRAMMER." THE PRAGMATIC PROGRAMMERS,LLC--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------